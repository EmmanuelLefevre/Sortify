// Fonction pour cr√©er une notification personnalis√©e en fonction du type
const createNotification = (type) => {
  let message;
  let body;
  let icon;

  // Utilisation d'un switch pour d√©terminer le type de notification
  switch (type) {
    case 'success':
      message = 'Notifications activ√©es';
      body = 'üöÄüöÄüöÄ Notifications activ√©es! üöÄüöÄüöÄ';
      icon = 'success-icon.png';  // Exemple d'ic√¥ne pour succ√®s
      break;
    case 'already_success':
      message = 'Notifications d√©j√† activ√©es';
      body = 'üöÄüöÄüöÄ Notifications d√©j√† activ√©es! üöÄüöÄüöÄ';
      icon = 'success-icon.png';  // Exemple d'ic√¥ne pour succ√®s
      break;
    case 'denied':
      message = 'Notification refus√©e';
      body = 'ü§¨ü§¨ü§¨ Notifications refus√©es! ü§¨ü§¨ü§¨';
      icon = 'denied-icon.png';   // Exemple d'ic√¥ne pour refus
      break;
    case 'error':
      message = 'Erreur';
      body = '‚ö†Ô∏è Erreur lors de la demande des permissions! ‚ö†Ô∏è';
      icon = 'error-icon.png';    // Exemple d'ic√¥ne pour erreur
      break;
    case 'info':
      message = 'Information';
      body = '‚ÑπÔ∏è Notifications en cours de v√©rification... ‚ÑπÔ∏è';
      icon = 'info-icon.png';     // Exemple d'ic√¥ne pour information
      break;
    default:
      message = 'Notification par d√©faut';
      body = 'üîî Vous avez une nouvelle notification! üîî';
      icon = 'default-icon.png';  // Ic√¥ne par d√©faut
      break;
  }

  // Cr√©er la notification
  new Notification(message, {
    body: body,
    icon: icon
  });
};

// Fonction pour mettre √† jour l'√©tat du bouton de notifications
const updateButtonVisibility = (button, shouldShow) => {
  button.style.display = shouldShow ? 'block' : 'none';
};

// Fonction pour g√©rer l'√©tat des permissions notifications et de son bouton
const handleNotificationPermissions = (enableNotifsButton) => {
  switch (Notification.permission) {
    // Masquer le bouton si les notifications sont d√©j√† accept√©es
    case "granted":
      updateButtonVisibility(enableNotifsButton, false);
      createNotification('already_success');
      break;

    // Si la permission n'est pas encore d√©termin√©e, demander √† l'utilisateur
    case "default":
      Notification.requestPermission().then((permission) => {
        updateButtonVisibility(enableNotifsButton, permission === "denied");
        if (permission === "granted") {
          createNotification('success');
        }
        else {
          createNotification('denied');
        }
      }).catch((err) => {
        console.error("Erreur lors de la demande des permissions : ", err);
        createNotification('error');
      });
      break;

    // Afficher le bouton si les notifications sont refus√©es
    case "denied":
      updateButtonVisibility(enableNotifsButton, true);
      createNotification('denied');
      break;
  }
};

// Chargement du DOM
document.addEventListener('DOMContentLoaded', () => {
  const enableNotifsButton = document.getElementById("enable-notifs");

  // Appeler la gestion des permissions de notifications
  handleNotificationPermissions(enableNotifsButton);
});


document.getElementById('sort-btn').addEventListener('click', () => {
  chrome.runtime.sendMessage({ action: "sortBookmarks" }, (response) => {
    if (response.success) {
      console.log("Favoris tri√©s avec succ√®s !");
    }
  });
});
